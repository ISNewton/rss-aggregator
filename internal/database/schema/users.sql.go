// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package schema

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id , name , created_at , updated_at)
VALUES ($1 , $2 , $3 , $4)
RETURNING id, name, created_at, updated_at, api_key
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT id, name, created_at, updated_at, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const issueApiKey = `-- name: IssueApiKey :one
UPDATE users SET api_key = $1 WHERE id = $2
RETURNING api_key
`

type IssueApiKeyParams struct {
	ApiKey sql.NullString
	ID     uuid.UUID
}

func (q *Queries) IssueApiKey(ctx context.Context, arg IssueApiKeyParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, issueApiKey, arg.ApiKey, arg.ID)
	var api_key sql.NullString
	err := row.Scan(&api_key)
	return api_key, err
}
